<tool id="preprocess_muon" name="Filter and Normalize with Muon" version="0.1.0">
    <requirements>
        <requirement type="package" version="0.1.2">muon</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[python '$script_file'
]]></command>
    <configfiles>
        <configfile name="script_file"><![CDATA[import muon as mu
mdata = mu.read_h5mu('$mudata_input')

#if $method.method == 'filter_obs'
obs_var = '$method.filter_obs_var'
mu.pp.filter_obs(
    mdata,
    var=obs_var,
    func=None
)

#else if $method.method == 'filter_var'
var_var = '$method.filter_var_var'
mu.pp.filter_var(
    mdata,
    var=var_var,
    func=None
)

#else if $method.method == 'intersect_obs'
mu.pp.intersect_obs(
    mdata
)

#else if $method.method == 'l2norm'
l2norm_mod = ([x.strip() for x in str($method.l2norm_mod).split(',')])
l2norm_rep = ([x.strip() for x in str($method.l2norm_rep).split(',')])
l2norm_n_pcs = $method.l2norm_n_pcs
mu.pp.l2norm(
    mdata,
    mod=l2norm_mod,
    rep=l2norm_rep,
    n_pcs=l2norm_n_pcs
)

#else if $method.method == 'neighbors'
n_neighbors=$method.neighbors_n_neighbors,
n_multineighbors=$method.neighbors_n_multineighbors,
neighbor_keys='$method.neighbors_neighbor_keys',
metric='$method.neighbors_metric',
key_added='$method.neighbors_key_added',
weight_key='$method.neighbors_weight_key',
add_weights_to_modalities=$method.neighbors_add_weights_to_modalities,
eps=$method.neighbors_eps
mu.pp.neighbors(
    mdata,
    n_neighbors=n_neighbors,
    n_multineighbors=n_multineighbors,
    neighbor_keys=neighbor_keys,
    metric=metric,
    key_added=key_added,
    weight_key=weight_key,
    add_weights_to_modalities=add_weights_to_modalities,
    eps=eps
)
#end if
mdata.write("mudata_with_preprocessing.h5mu")
]]></configfile>
    </configfiles>
    <inputs>
        <param name="mudata_input" type="data" format="h5mu" label="MuData input file to run preprocessing" help="(.h5mu)"/>
        <conditional name="method">
            <param argument="method" type="select" label="Method used for plotting">
                    <option value="filter_obs">Filter: Filter observations (samples or cells) in-place using any column in .obs or in .X, using 'muon.pp.filter_obs'</option>
                    <option value="filter_var">Filter: Filter variables (features), using 'muon.pp.filter_var'</option>
                    <option value="intersect_obs">Subset: Subset observations (samples or cells) in-place taking observations present only in all modalities, using 'muon.pp.intersect_obs'</option>
                    <option value="l2norm">Normalize: Normalize observations to unit L2 norm, using 'muon.pp.l2norm'</option>
                    <option value="neighbors">Search: Multimodal nearest neighbor search, using 'muon.pp.neighbors'</option>
            </param>
            <when value="filter_obs">
                <param argument="filter_obs_var" type="text" label="Column name in .obs or in .X to be used for filtering" help="(var)" value="total_counts"/>
                <param argument="filter_obs_func" type="text" label="Function to apply to the variable used for filtering.
                If the variable is of type boolean and func is an identity function, the func argument can be omitted." help="(func), written as a lambda function"/>
            </when>
            <when value="filter_var">
                <param argument="filter_var_var" type="text" label="Column name in .var or row name in .X to be used for filtering" help="(var)" value="n_cells_by_count"/>
                <param argument="filter_var_func" type="text" label="Function to apply to the variable used for filtering."
                       help="(func), written as a lambda function"/>
            </when>
            <when value="intersect_obs"/>
            <when value="l2norm">
                <param argument="l2norm_mod" type="text" label="Names of the modalities to normalize" help="(mod)"/>
                <param argument="l2norm_rep" type="text" label="The representation to normalize. X or any key for .obsm is valid, for all modalities" help="(rep)"/>
                <param argument="l2norm_n_pcs" type="text" label="The number of principal components to use. This affects the result only if a PCA representation is being normalized" help="(n_pcs)"/>
            </when>
            <when value="neighbors">
                <param argument="neighbors_n_neighbors" type="text" label="Number of nearest neighbors to find" help="(n_neighbors)"/>
                <param argument="neighbors_n_multineighbors" type="text" label="Number of nearest neighbors in each modality to consider as
                candidates for multimodal nearest neighbors. Only points in the union of per-modality nearest neighbors are candidates for
                multimodal nearest neighbors. This will use the same metric that was used for the nearest neighbor search in the respective modality"
                       value="200" help="(n_multineighbors)"/>
                <param argument="neighbors_neighbor_keys" type="text" value="neighbors" label="Keys in .uns where per-modality neighborhood information is stored" help="(neighbor_keys)"/>
                <param argument="neighbors_metric" type="text" value="euclidean" label="Distance measure to use. This will only be used in the final step to search for nearest neighbors in the set of candidates" help="(metric)"/>
                <param argument="neighbors_key_added" type="text" label=" If specified, the neighbors data is added to .uns[key_added], distances are stored in .obsp[key_added + '_distances'] and connectivities in .obsp[key_added + '_connectivities']" help="(key_added)"/>
                <param argument="neighbors_weight_key" type="text" value="mod_weight" label="Weight key to add to each modalityâ€™s .obs or to mdata.obs" help="(weight_key)"/>
                <param argument="neighbors_add_weights_to_modalities" type="boolean" truevalue="True" falsevalue="False" checked="false" label="If to add weights to individual modalities. By default, it is False and the weights will be added to mdata.obs" help="(add_weights_to_modalities)"/>
                <param argument="neighbors_eps" type="float" label="Small number to avoid numerical errors." value="0.0001" help="(eps)"/>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data name="mudata_with_preprocessing" format="h5mu" label="MuData with Preprocessing" from_work_dir="mudata_with_preprocessing.h5mu"/>
    </outputs>
    <tests>
        <test>
            <!--Test for filter_obs-->
            <param name="mudata_input" value="mudata_input.h5mu"/>
            <param name="method" value="filter_obs"/>
            <param name="filter_obs_var" value="total_counts"/>
            <output name="mudata_with_preprocessing" file="mudata_with_preprocessing.h5mu"/>
        </test>
        <test>
            <!--Test for filter_var-->
            <param name="mudata_input" value="mudata_input.h5mu"/>
            <param name="method" value="filter_var"/>
            <param name="filter_var_var" value="n_cells_by_count"/>
            <output name="mudata_with_preprocessing" file="mudata_with_preprocessing.h5mu"/>
        </test>
        <test>
            <!--Test for intersect_obs-->
            <param name="mudata_input" value="mudata_input.h5mu"/>
            <param name="method" value="intersect_obs"/>
            <output name="mudata_with_preprocessing" file="mudata_with_preprocessing.h5mu"/>
        </test>
        <test>
            <!--Test for l2norm-->
            <param name="mudata_input" value="mudata_input.h5mu"/>
            <param name="method" value="l2norm"/>
            <param name="l2norm_mod" value="rna"/>
            <param name="l2norm_rep" value="X_pca"/>
            <param name="l2norm_n_pcs" value="0"/>
            <output name="mudata_with_preprocessing" file="mudata_with_preprocessing.h5mu"/>
        </test>
        <test>
            <!--Test for neighbors-->
            <param name="mudata_input" value="mudata_input.h5mu"/>
            <param name="method" value="neighbors"/>
            <param name="neighbors_n_neighbors" value="20"/>
            <param name="neighbors_n_multineighbors" value="200"/>
            <param name="neighbors_neighbor_keys" value="neighbors"/>
            <param name="neighbors_metric" value="euclidean"/>
            <param name="neighbors_key_added" value="neighbors"/>
            <param name="neighbors_weight_key" value="mod_weight"/>
            <param name="neighbors_add_weights_to_modalities" value="False"/>
            <param name="neighbors_eps" value="0.0001"/>
            <output name="mudata_with_preprocessing" file="mudata_with_preprocessing.h5mu"/>
        </test>
    </tests>
    <help><![CDATA[
Filter: Filter observations (samples or cells) in-place using any column in .obs or in .X ('muon.pp.filter_obs')
================================================================================================================

        Filter observations (samples or cells) in-place using any column in .obs or in .X.

        More details on the `muon documentation
        <https://muon.readthedocs.io/en/latest/api/generated/muon.pp.filter_obs.html#muon.pp.filter_obs>`__

Filter: Filter variables (features) ('muon.pp.filter_var')
==========================================================

        Filter variables (features, e.g. genes) in-place using any column in .var or row in .X.

        More details on the `muon documentation
        <https://muon.readthedocs.io/en/latest/api/generated/muon.pp.filter_var.html#muon.pp.filter_var>`__

Subset: Subset observations (samples or cells) in-place taking observations present only in all modalities ('muon.pp.intersect_obs')
====================================================================================================================================

        Subset observations (samples or cells) in-place taking observations present only in all modalities.

        More details on the 'muon documentation
        <https://muon.readthedocs.io/en/latest/api/generated/muon.pp.intersect_obs.html#muon.pp.intersect_obs>`__

Normalize: Normalize observations to unit L2 norm ('muon.pp.l2norm')
====================================================================

        Normalize observations to unit L2 norm.

        More details on the 'muon documentation
        <https://muon.readthedocs.io/en/latest/api/generated/muon.pp.l2norm.html#muon.pp.l2norm>`__

Search: Multimodal nearest neighbor search ('muon.pp.neighbors')
================================================================

        Multimodal nearest neighbor search by implementing the multimodal nearest neighbor method of Hao et al. and Swanson et al.
        The neighbor search efficiency on this heavily relies on UMAP. In particular, you may want to decrease
        n_multineighbors for large data set to avoid excessive peak memory use. To achieve results as close as possible
        to the Seurat implementation, observations must be normalized to unit L2 norm prior to running per-modality
        nearest-neighbor search.

        More details on the 'muon documentation
        <https://muon.readthedocs.io/en/latest/api/generated/muon.pp.neighbors.html#muon.pp.neighbors>`__

    ]]></help>
    <citations>
        <citation type="bibtex">
}</citation>
    </citations>
</tool>