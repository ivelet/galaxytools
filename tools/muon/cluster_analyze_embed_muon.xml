<tool id="cluster_analyze_embed_muon" name="Cluster, analyze, and embed multimodal data with muon" version="0.1.0">
    <requirements>
        <requirement type="package" version="1.7.0">scanpy</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
        python '$script_file'
]]></command>
    <configfiles>
        <configfile name="script_file"><![CDATA[import scanpy as sc
import muon as mu
mdata = mu.read_h5mu('$mudata_input')
#if $method.method == 'leiden'
mu.tl.leiden(
mdata,
key_added='$method.leiden_key_added',
resolution=$method.leiden_resolution,
random_state=$method.leiden_random_state,
mod_weights=$method.leiden_mod_weights,
n_iterations=$method.leiden_n_iterations
)
#else if $method.method == 'louvain'
mu.tl.louvain(
mdata,
key_added='$method.louvain_key_added',
resolution=$method.louvain_resolution,
random_state=$method.louvain_random_state,
mod_weights=$method.louvain_mod_weights
)
#else if $method.method == 'ica'
mu.tl.ica(
mdata,
)
#else if $method.method == 'mofa'
mu.tl.mofa(
mdata,
)
#else if $method.method == 'snf'
mu.tl.snf(
mdata,
)
#else
mu.tl.umap(
mdata,
)
#end if
mdata.write("mudata_with_processing.h5mu")
]]></configfile>
    </configfiles>
    <inputs>
        <param name="mudata_input" type="data" format="h5mu" label="MuData input file to run processing" help="(.h5mu)"/>
        <conditional name="method">
            <param argument="method" type="select" label="Method used for processing">
                    <option value="leiden">Cluster: Cluster cells using the Leiden algorithm, using 'muon.tl.leiden'</option>
                    <option value="louvain">Cluster: Cluster cells using the Louvain algorithm, using 'muon.tl.louvain'</option>
                    <option value="ica">Analyze: Run Independent Component Analysis, using 'muon.tl.ica'</option>
                    <option value="mofa">Analyze: Run Multi Omics Factor Analysis, using 'muon.tl.mofa'</option>
                    <option value="snf">Analyze: Similarity Network Fusion, using 'muon.tl.snf'</option>
                    <option value="umap">Embed: Embed the multimodal neighborhood graph using UMAP, using 'muon.tl.mofa'</option>
            </param>
            <when value="leiden">
                <param name="leiden_resolution" type="float" value="1" label="Coarseness of the clustering" help="Higher values lead to more clusters (resolution)"/>
                <param name="leiden_random_state" type="integer" value="0" label="Random seed" help="Change the initialization of the optimization (random_state)"/>
                <param name="leiden_key_added" type="text" value="leiden_joint" label="Key under which to add the cluster labels" help="(key_added)"/>
                <param name="leiden_mod_weights" type="float" value="1" label="Weight for each modality to control contribution" help="(mod_weights)"/>
                <param name="leiden_n_iterations" type="integer" value="-1" label="Number of iterations of the Leiden clustering algorithm to perform" help="Positive values above 2 define the total number of iterations to perform, -1 has the algorithm run until it reaches its optimal clustering. (n_iterations)"/>

            </when>
            <when value="louvain">
                <param name="louvain_resolution" type="float" value="1" label="Coarseness of the clustering" help="Higher values lead to more clusters (resolution)"/>
                <param name="louvain_random_state" type="integer" value="0" label="Random seed" help="Change the initialization of the optimization (random_state)"/>
                <param name="louvain_key_added" type="text" value="leiden_joint" label="Key under which to add the cluster labels" help="(key_added)"/>
                <param name="louvain_mod_weights" type="float" value="1" label="Weight for each modality to control contribution" help="(mod_weights)"/>
            </when>
            <when value="ica">
            </when>
            <when value="mofa">
                <param argument="filter_obs_var" type="text" label="Column name in .obs or in .X to be used for filtering" help="(var)"/>
            </when>
            <when value="snf">
                <param argument="filter_obs_var" type="text" label="Column name in .obs or in .X to be used for filtering" help="(var)"/>
            </when>
            <when value="umap">
                <param argument="filter_obs_var" type="text" label="Column name in .obs or in .X to be used for filtering" help="(var)"/>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data name="mudata_with_processing" format="h5mu" label="MuData with Processing" from_work_dir="mudata_with_processing.h5mu"/>
    </outputs>
    <tests>
        <test>
            <param name="mudata_input" value="mudata_input.h5mu"/>
            <output name="mudata_with_processing" file="mudata_with_processing.h5mu"/>
        </test>
    </tests>
    <help><![CDATA[
    **What it does**
        Import MuData from AnnData is a tool that allows creating a muon.MuData object out of two AnnData objects
        for multimodal omics factorial analysis.
        Furthermore, it runs pp.intersect_obs to keep only entries present in both modalities (AnnData objects) in the
        final MuData file.

    ]]></help>
    <citations>/
        <citation type="bibtex">
}</citation>
    </citations>
</tool>